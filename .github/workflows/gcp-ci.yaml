name: Build & Deploy

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  APP_NAME: services-inventory
  ORG: ${{ github.repository_owner }}
  PROJECT_ID: accelerator-386214
  REGION: us
  GAR_LOCATION: us-docker.pkg.dev/accelerator-386214/services-inventory

  
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build:
    name: "Build With Workflow Identity Fed"
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: auth
        uses: google-github-actions/auth@v0.4.0
        with:
          token_format: "access_token"
          create_credentials_file: true
          activate_credentials_file: true
          workload_identity_provider: 'projects/1075624678739/locations/global/workloadIdentityPools/github-identity-pool-dev/providers/github'
          service_account: 'spanner-dev-access@accelerator-386214.iam.gserviceaccount.com'
          access_token_lifetime: '100s'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
      - name: set crdential_file
        run: gcloud auth login --cred-file=${{steps.auth.outputs.credentials_file_path}}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
          cache: "maven"
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn clean install
        env:
          CT_PROJECT_KEY: ${{ vars.BUILD_CT_PROJECT_KEY }}
          CT_CLIENT_ID: ${{ secrets.BUILD_CT_CLIENT_ID }}
          CT_CLIENT_SECRET: ${{ secrets.BUILD_CT_CLIENT_SECRET }}
          CT_API_URL: ${{ vars.BUILD_CT_API_URL }}
          CT_AUTH_URL: ${{ vars.BUILD_CT_AUTH_URL }}
          CT_PROJECT_SCOPES: ${{ vars.BUILD_CT_SCOPES }}
      # Verify against a "build" CT project, typically dev
      - name: Run tests, build OpenAPI spec
        run: mvn verify
        env:
          CT_PROJECT_KEY: ${{ vars.BUILD_CT_PROJECT_KEY }}
          CT_CLIENT_ID: ${{ secrets.BUILD_CT_CLIENT_ID }}
          CT_CLIENT_SECRET: ${{ secrets.BUILD_CT_CLIENT_SECRET }}
          CT_API_URL: ${{ vars.BUILD_CT_API_URL }}
          CT_AUTH_URL: ${{ vars.BUILD_CT_AUTH_URL }}
          CT_PROJECT_SCOPES: ${{ vars.BUILD_CT_SCOPES }}
      # Save open api spec as artifact
      - name: Archive OpenAPI spec
        uses: actions/upload-artifact@v3
        with:
          name: api-spec
          path: target/openapi.json
      - name: "Use gcloud CLI"
        run: "gcloud info"
      - name: Set short git commit SHA
        if: github.ref_name == 'main'
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "SHORT_SHA=$calculatedSha" >> $GITHUB_ENV
      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Build image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}/${{ env.APP_NAME }}:${{ env.SHORT_SHA }} .
          docker tag ${{ env.GAR_LOCATION }}/${{ env.APP_NAME }}:${{ env.SHORT_SHA }} ${{ env.GAR_LOCATION }}/${{ env.APP_NAME }}:latest
          docker push ${{ env.GAR_LOCATION }}/${{ env.APP_NAME }}:${{ env.SHORT_SHA }}
          docker push ${{ env.GAR_LOCATION }}/${{ env.APP_NAME }}:latest 
      - name: "Deploy to app Engine"
        run: "gcloud app deploy --image-url=${{ env.GAR_LOCATION }}/${{ env.APP_NAME }}:latest"
    
#         docker build -t ${{ env.GAR_LOCATION }}:${{ env.SHORT_SHA }} .
#         run: docker build . --file Dockerfile --tag ${{ env.GAR_LOCATION }}
#         working-directory: WORKING_DIRECTORY
         
#      - name: Push image
#        run: docker push ${{ env.GAR_LOCATION }}
  
      # push image to GCP
#      - name: Configure AWS credentials
#        if: github.ref_name == 'main'
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: ${{ vars.BUILD_AWS_ECR_REGION }}
#          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-${{ env.ORG }}-${{ env.APP_NAME }}

#      - name: Login to Amazon ECR
#        if: github.ref_name == 'main'
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1

#      - name: Set short git commit SHA
#        if: github.ref_name == 'main'
#        id: vars
#        run: |
#          calculatedSha=$(git rev-parse --short ${{ github.sha }})
#          echo "SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

#      - name: Build, tag, and push docker image to Amazon ECR
#        if: github.ref_name == 'main'
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        run: |
#          docker build -t ${REGISTRY}/${{ env.APP_NAME }}:${{ env.SHORT_SHA }} .
#          docker tag ${REGISTRY}/${{ env.APP_NAME }}:${{ env.SHORT_SHA }} ${REGISTRY}/${{ env.APP_NAME }}:latest
#          docker push ${REGISTRY}/${{ env.APP_NAME }}:${{ env.SHORT_SHA }}
#          docker push ${REGISTRY}/${{ env.APP_NAME }}:latest 

